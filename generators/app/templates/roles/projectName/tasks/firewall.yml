--- # tasks/firewall.yml

- name: turn off firewalld
  service: name=firewalld state=stopped enabled=no

- name: install iptables services
  yum: name=iptables-services state=present

- name: ensure iptables is enabled
  command: systemctl enable iptables
  notify:
  - start iptables
  - restart iptables

- name: set modprob netfilter
  modprobe: name=br_netfilter state=present

- name: pass bridged ipv4 traffic to iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    sysctl_set: yes
    state: present
    reload: yes

- name: pass bridged ipv6 traffic to iptables
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: 1
    sysctl_set: yes
    state: present
    reload: yes

- name: restart docker service
  systemd: name=docker state=restarted enabled=yes

- name: allow related and established connections
  iptables:
    chain: "{{ item }}"
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    comment: allow related and established connections
  with_items:
  - INPUT
  - FORWARD
  - DOCKER-USER
  notify:
  - restart iptables
  - save iptables

- name: allow loopback in
  iptables:
    chain: INPUT
    in_interface: lo
    jump: ACCEPT
    comment: allow loopback in
  notify:
  - restart iptables
  - save iptables

- name: allow loopback outputs
  iptables:
    chain: OUTPUT
    out_interface: lo
    jump: ACCEPT
    comment: allow loopback out
  notify:
  - restart iptables
  - save iptables

- name: make pingable
  iptables:
    chain: "{{ item }}"
    protocol: icmp
    jump: ACCEPT
    comment: make pingable
  with_items:
  - INPUT
  - OUTPUT
  notify:
  - restart iptables
  - save iptables

- name: allow public traffic inputs to public ports
  iptables:
    chain: INPUT
    source: 0.0.0.0/0
    destination_port: "{{ item }}"
    protocol: tcp
    jump: ACCEPT
    comment: allow public traffic
  with_items: "{{ public_ports }}"

- name: allow public traffic forwards to public ports
  iptables:
    chain: FORWARD
    source: 0.0.0.0/0
    destination_port: "{{ item }}"
    protocol: tcp
    jump: ACCEPT
    comment: allow public traffic
  with_items: "{{ public_ports }}"

- name: allow input to internal ports host from approved sources
  iptables:
    chain: INPUT
    source: "{{ item[0] }}"
    destination_port: "{{ item[1] }}"
    protocol: tcp
    jump: ACCEPT
    comment: allow internal traffic
  with_nested:
  - "{{ internal_allowlist }}"
  - "{{ internal_ports }}"

- name: forward traffic on internal ports host from approved sources
  iptables:
    chain: FORWARD
    source: "{{ item[0] }}"
    destination_port: "{{ item[1] }}"
    protocol: tcp
    jump: ACCEPT
    comment: allow internal traffic
  with_nested:
  - "{{ internal_allowlist }}"
  - "{{ internal_ports }}"

- name: accept traffic to docker-user chain from internal allowlist
  iptables:
    chain: DOCKER-USER
    source: "{{ item }}"
    jump: ACCEPT
    comment: accept traffic to docker-user chain from internal allowlist
  with_items:
  - "{{ local_allowlist }}"
  notify:
  - restart iptables
  - save iptables

- name: delete the drop rule, in case it's not 2nd to last
  iptables:
    chain: DOCKER-USER
    protocol: all
    jump: DROP
    comment: drop any other traffic
    state: absent
  notify:
  - restart iptables
  - save iptables

- name: re-add the drop rule, so it's 2nd to last
  iptables:
    chain: DOCKER-USER
    protocol: all
    jump: DROP
    comment: drop any other traffic
    state: present
  notify:
  - restart iptables
  - save iptables

- name: delete the return rule, in case it's not last in the chain
  iptables:
    chain: DOCKER-USER
    protocol: all
    jump: RETURN
    state: absent
  notify:
  - restart iptables
  - save iptables

- name: re-add the return rule, so its last
  iptables:
    chain: DOCKER-USER
    protocol: all
    jump: RETURN
    state: present
  notify:
  - restart iptables
  - save iptables

- name: set input policy to drop
  iptables:
    chain: INPUT
    policy: DROP
  notify:
  - save iptables

- name: set forward policy to drop
  iptables:
    chain: FORWARD
    policy: DROP
  notify:
  - save iptables

- name: set output policy to accept
  iptables:
    chain: OUTPUT
    policy: ACCEPT
  notify:
  - save iptables
